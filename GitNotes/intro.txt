1. git의 역사와 버젼 관리
    1)사례
       - final -> 
       final.v2 -> 
       final_최종 
       // 끊임없는 수정

    2) 어떤 문제가 있나
        - 변경사항에 대한 이력을 알기 어려움!!
        - version 5.1 ~ version 7.2 숫자가 잘못되면?
        - 실수로 파일 삭제
        - 다른파일로 덮일수있음

    3) 버전 관리 (version control)
        -소프트웨어 파이르이 변화를 기록
        -시간이 지나서도 특저 시점의 파일을 불어올 수 있는 것
        -최신 파일에 문제가 있을 떄, 최신파일을 삭제 후 예전버젼 돌아가기 가능
        -두 시점의 파일을 비교할수있는것

2. 버젼 관리 시스템
    1) vcs (version control system)라고 함
    2) 모든 직종 다 dvcs (distributed ...) 씀

3. 버전 관리의 유형
    1) 로컬 버젼 관리
        - 로컬 환경에서 사용할수있는 버젼 관리
    2) CENTERALIZED VERSION CONTROL SYSTEM (center vs client)
        -협업을 위한 버전 관리
        -Subversion (svn)
    3) DISTRIBUTED/DE-CENTRALIZED VERSION CONTROL SYSTEM
        - 각 클라이언트가 모든정보를 다 가지고 있는 버젼 관리
        - git

4. GIT의 역사 - O/S control software
    1) 1990년대 리눅스가 개발될 떄, 단순 압축 파일로 관리되었음
    2) 리눅스는 규모가 큰 오픈소스 프로젝트
    3) 버전 관리의 한계에 봉착 
    4) 2002년에 bitkeeper라는 상용 DVCS를 사용하기 시작
        -상용 프로그램이지만 bitkeeper측에서 리눅스 커뮤니티에게 뮤료로 사용할 수있게 허락
        -그러다가 bitkeeper의 이용 약관을 위반하는 일이 발생
        -이후 bitkeeper는 무료로 사용하지 못하게 제한
    5) 2005년에 자체 버젼 관리 시스템을 만들기로 결정
        -리눅스 창시자 리누스 토르발스
        -2주만 에 만들었다고함
        -다만 learning curve가 있다 - 시간좀걸림

5. git의 기초
    1) 파일을 스냅샷으로 취급하고 크기가 아주 작음
    2) commit/저장 그 순간을 중요하게 여기는 것
    3) 파일이 달라지지 않으면 성늘을 위해 새로 저장하지 않음
    4) 이전 상태의 대한 링크만 저장
        -데이터를 스냅샷의 stream처럼(buffer) 취급

6. 로컬 환경에서 작업 가능
    1) 로컬에서 명령어를 수행할수 있기 떄문에 네트워크가 필요없다(repository에서의 데이터는 local에 있다)
    2) 속도 빠름
    3) 네트워크가 연결되기전까지 로컬 환경에서 커밋을 만들어 두고, 네트워크가 연결되면 리모트 저장소 repository에 푸시하면 됨
    