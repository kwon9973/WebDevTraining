1. Docker
    1) 2013 년 처음으로 세상에 알려짐
    2) 컨테이너 기반의 오픈소스 가상화 플랫폼
    3) 앱을 신속하게 수축, 테스트 및 배포할수있는 소프트웨어 플랫폼
    4) 소트트웨어를 컨테이너라는 표준화 유닛으로 패키징, 이컨테이너에는 라이브러리, 시스템고구, 코드, 런타임 등 소프트웨어를 실행하는데 필요한 모든것이 포함됨
    5) 환경에 제한받지 않고 엡에 신속하게 배포및 확장
    6) 코드를 실행하는 표준방식을 제공하면 컨테이너를 위한 운영체제
    7) 개발자가 컨테이너를 빌드, 배포, 실행, 업데이트 등 관리할수있는 오픈소스 플랫폼
    8)기업에서 클라우드 네이티브 개발 및 하이브리드 멀티클라우드 환경으로 전환함에 따라 컨테이너가 더웃 널리 사용되고있음
        -클라우드 네이티브 
            -클라우드 컴퓨팅의 장점을 최대한 활용할 수있도록 앱을 개발하고 운영하는 방법론
2. 가상화
    1)컨테이너-가상머신(무겁다)
        -OS와 하드웨어가 드라이버를 HOST(host O/S -> 내 OS)의 운영체제 즉 커널*단이 아닌 유저 단에가상화를 구현하는 방식 
        -가상화의 목적 - app 사용 매번 운영체재를 따라 설치해주는것은 host 컴퓨터입장에서는 부담스러운 일
        -그래서 컨테이너로 트렌드됨

        -하이퍼바이저(무겁다)
            -호스트 컴퓨터에서 다수의 운영체제를 동시에 실행하기 위한 논리적 플랫폼을 말함
            -가상화 머신 모니터 아님 가상화 머신 매니저라고 부름 
            -ex) virtualBox, Vmware workstation
            -하이퍼 가상화***

            


    2) 도커 컨테이너 (도커 엔진) (가볍다) (linux only and based - window can't - window tried buy docker) (os systemtically offers enviroment for docker - now opensourced window can use Docker with WSL2 too) 
        - 도커엔진을 이용하여 컨테이너라는 것을 구동함
            -컨테이너는 앱을 사용할수있는 가상환경이고 병도의 운영체제가 필요하지않음
            -이를 통해 우리목적인 앱사용하도 가능하고 host 환경에도 부담이 덜됨

            -컨네이터 가상화***
            -목적
                -가상화를 서버를 빠르고 가볍게 운영하기 위해 사용
    3) vm 기반 가상화와 도커(automatically comes with 컨테이너)기반 가상화비교
        -하드웨어를 가상화하는 가상 머신
        -커널을 공유하는 방식인 컨테이너 기반 가상화
            -실행속도가 빠르고
    4) WSL2
        -Windows Subsystem for linux 
    
3. docker를 왜 알아야 하는가?
    1) 핵심장점
        -portability 
            -cpu 가바뀌면 구동한 시스템이 실행안됨 - 그럼 또 개발해야됨
            -다른곳으로 쉽계 옯겨서 설치및 실행할수있는 특성
    2) 매번 귀찮은 설치과정없음
    3) 일관되게 프로그램을 설치할수잇다 -정용화되있다
        -버전, 환경 설정, 운영 체제 등
    4) 각 프로그램이 독립적인 환경에서 실행되기 떄문에
        프로그램 간에 서로 충돌이 일어나지 않음.

4. 이미지와 컨테이너    
    1) Docker 
        -컨테이너를 이용하여 각각의 프로그램을 분리된 환경에서 실행 및관리할수있는 툴임
    2) 컨테이너 (container)
        -하나의 컴퓨터 환경 내에서 독립적인 환경을 구성해서, 각 환경에 프로그램을 별도로 설치할수있게 만든 개념
            -독립적으로 관리
                -디스크(저장공간)
                    -각 컨테이너마다 서로 각자의 저장공간을 가짐 (access is impossible among containers)
                -네트워크 (ip,port)
                    -각각의 컨테이너마다 고유네트워크 갔고잇음
        -하나의 컴퓨터 환경 내에서 여러개의 미니컴퓨터 환경을 구성할수있는 형태임
    3) HOST 컴퓨터 = 운영체제
        -컨테이너를 포함하고 있는 컴퓨터

    4)이미지
        -프로그램을 실행하는데 필요한 설치과정, 버젼 기록, 등등
        -프로그램을 실행하는 필요한 모든 것을 포함한것
    5) 도커 이미지 & 도커 컨테이너
        -도커 이미지   
            -특정 서버 또는 앱의 실행할수있는 상태를 저장한 압축파일
        -도커 컨테이너
            -도커 이미지를 실행한 인스턴스
            -필요한 요소를 포함하는 sw 패키지
            -실행 가능한 sw + 실행에 필요한 환경
    
5. 프로그램 & 프로세스 (-비유-) 도커 이미지 & 도커 컨테이너
    -프로세스 앱을 열기전 필요한 모든것이
    -프로그램은 actual running app 

