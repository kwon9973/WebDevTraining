1. 소프트웨어 개발 변화
    1) SOFTWARE 1.0 
        - Classice Stack
            - 개발자가 프로그래민 언어로 직접 프로그램을 작성하고
            COMPILIER 가 binary 언어로 CPU에 통역해준다/ 프로그램을 생성하는 전통적인 방식
            - DB -> 프로그램 -> Result
            - 절차적/객체지향 패러다임
                - C, C++, JAVA, PYTHON, JAVASCRIPT, ETC
    2) SOFTWARE 2.0
        -ML (machine learning)
            - input based 데이터를 기반으로 꾸준히 학습된 ML 모델 자체가 프로그램이 되러 결과를 생성하는 방식
            - 학습데이터 -> ML 모델 -> RESULT
                (csv...) 
            -학습된 가중치 기반 동작 
            -데이터 주도 최적화
            -통계적 패턴 안식 -> 추론
                -PYTORCH, TENSORFLOW, SCIKIT-LEARN, ETC
    3) SOFTWARE 3.0
        - PROMPT ENGINEERING
            - 자연어로 AI 모델에게 작업 지시하고 정의하여 결과생성 방식
            - 사람 -> LLM(대규모 언어 모델) -> 코드생성, 컨텐츠 생성성
            - 자연어 기반 지시 및 제어
            - LLM을 통한 코드/컨텐츠 생성
            - prompt 최적하 결과 생성
                - GPT-4o, Claud, LLaMA, Gemini, Midjourney, ETC
    4) SOFRWARE 4.0
        - AI AGENT 기반 개발
            - 자율적인 AI agents끼리 협업하여 복잡한 소프트웨어 시스템을 구축하는 방식 
            - 개발 에이전트 -> 기획 에이전드 -> 테스트 에이전트 until 완성된 아이템
            - 자율족 ai 에이전트 협업 시스템
                -LangChain (language chain), RAG, AGENT, AUTOGPT, Claude-AI, etc.


2. 개발자
    1) 코딩만 하는건 아님
    2) 기술적으로 AI도구를 사용하여 코딩으로 문제를 푸는 사람


3. 클린코드, 좋은코드
    1) 코드는 끊임없이 변화함; 변화가 용이해야함.
    2) LEGACY 코드 
        -(테스트되지 않은 채 유지보수되고 있는)기존의 코드
        -(내가)구현했지만 기억이나지않는 코드
    3) LEGACY 코드의 비용 
        -유지보수 비용 증가
            -해결하지 못한 설계 결함, 코드 문제
        -호환성 문제
            -새로운 기술도입/외부시스템과의 연동 어려움
        -보안 취약성
            -라이브러리가 프레임워크 어려움  

4. PAIR-PROGRAMMING (페어프로그래밍)
    1) 두 개발자가 하나의 작업 스테이션에서 함꼐 코드를 작성하는 협업 기법
    2) 드라이버: 주도적인 코더/프로그래머
        -네비게이터: 코드를 리뷰
    

